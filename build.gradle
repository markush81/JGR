buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

import org.apache.tools.ant.filters.ReplaceTokens


allprojects {
    apply plugin: 'idea'

    repositories {
        mavenCentral()
    }
}

configure(subprojects - project(':jgr-r')) {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6

    compileJava {
        options.encoding = 'UTF-8'
    }

    javadoc {
        options.addStringOption('encoding', 'UTF-8')
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
//        archives javadocJar
    }

    dependencies {
    }
}

project(":jgr-java") {
    dependencies {
        compile project(":ibase")
        compile project(":javagd")
        compile project(":REngine")
        compile 'com.massisframework:orange-extensions:1.3.1'
//        compile 'net.sf.jedit-syntax:jedit-syntax:2.2.2'
    }

    jar {
        manifest {
            attributes "Implementation-Version": version
        }
    }

    shadowJar {
        baseName = 'JGR'
        classifier = null
        version = null
        dependencies {
            exclude(project(':javagd'))
            exclude(project(':rJava'))
//            exclude(dependency('com.massisframework:orange-extensions:1.3.1'))
//            exclude(dependency('net.sf.jedit-syntax:jedit-syntax:2.2.2'))
        }
    }

    jar.finalizedBy shadowJar
}

project(":jgr-r") {
    apply plugin: 'base'

    def javaDist = 'src/main/JGR/inst/java'
    def javaSrc = 'src/main/JGR/java'

    clean.doLast {
        file('src/main/JGR/DESCRIPTION').delete()
        file('src/main/JGR/R').deleteDir()
        file(javaDist).deleteDir()
        file(javaSrc).deleteDir()
        file(javaDist).mkdir()
        file(javaSrc).mkdir()
    }

    task prepareJGR(type: Copy) {
        from('src/main/raw')
        into('src/main/JGR')
        filter(ReplaceTokens, tokens: [VERSION: version, DATE: new Date().format("yyyy-MM-dd"), DATETIME: new Date().format("yyyy-MM-dd HH:mm:SS z")])
    }

    task copyJGR(type: Copy) {
        from file("${project(':jgr-java').buildDir}/libs/JGR.jar")
        into javaDist
    }

    task copyJGRSource(type: Copy) {
        from project(':jgr-java').sourceSets.main.java.srcDirs
        into javaSrc
    }

    copyJGR.dependsOn project(":jgr-java").build
    build.dependsOn prepareJGR, copyJGR, copyJGRSource
}

project(":ibase") {
}

project(":REngine") {
    sourceSets {
        main {
            java {
                srcDirs = [projectDir]
                exclude '**/Rserve/*', '**/JRI/test/*'
            }
        }
    }

    idea {
        module {
            contentRoot = file(projectDir)
            sourceDirs += file(projectDir)
            excludeDirs += file('Rserve')
            excludeDirs += file('JRI/test')
        }
    }

    dependencies {
        compile project(":rJava")
    }
    javadoc.enabled false
    sourcesJar.enabled false
}

project(":rJava") {
    sourceSets {
        main {
            java {
                srcDirs = ['jri']
                exclude '**/bootstrap/**', '**/examples/**', '**/tools/**', '**/REngine/**'
            }
        }
    }

    idea {
        module {
            excludeDirs += file('jri/bootstrap')
            excludeDirs += file('jri/examples')
            excludeDirs += file('jri/tools')
            excludeDirs += file('jri/src')
            excludeDirs += file('jri/REngine')
        }
    }

    javadoc.enabled false
    sourcesJar.enabled false
}


task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-4.1-all.zip'
}

idea {
    targetVersion = '16'
}
